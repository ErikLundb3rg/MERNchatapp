{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\erikl\\\\onedrive\\\\skrivbord\\\\prog2020\\\\chatapp\\\\client\\\\src\\\\components\\\\Chat\\\\Chat.js\";\nimport React, { useState, useEffect } from \"react\";\nimport queryString from \"query-string\";\nimport io from \"socket.io-client\";\nimport InfoBar from \"../InfoBar/InfoBar\";\nimport \"./Chat.css\";\nlet socket;\nconst ENDPOINT = \"localhost:5000\";\n\nconst Chat = ({\n  location\n}) => {\n  const [name, setName] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [message, setMessage] = useState(\"\");\n  useEffect(() => {\n    const {\n      name,\n      room\n    } = queryString.parse(location.search);\n    console.log(name, room);\n    socket = io(ENDPOINT);\n    setName(name);\n    setRoom(room);\n    socket.emit('join', {\n      name,\n      room\n    }, error => {\n      if (error) {\n        alert(error);\n      }\n    }); // exiting handling\n\n    return () => {\n      socket.emit(\"disconnect\");\n      socket.off();\n    };\n  }, [ENDPOINT, location.search]);\n  useEffect(() => {\n    socket.on('message', message => {\n      setMessages(messages => [...messages, message]);\n    });\n  }, []);\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    if (message) {\n      socket.emit(\"sendMessage\", message, () => setMessage(\"\"));\n    }\n  };\n\n  console.log(\"message: \", message, \" messages: \", messages); // function for sending messages\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"outerContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InfoBar, {\n    room: room,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default Chat;","map":{"version":3,"sources":["C:/Users/erikl/onedrive/skrivbord/prog2020/chatapp/client/src/components/Chat/Chat.js"],"names":["React","useState","useEffect","queryString","io","InfoBar","socket","ENDPOINT","Chat","location","name","setName","room","setRoom","messages","setMessages","message","setMessage","parse","search","console","log","emit","error","alert","off","on","sendMessage","event","preventDefault"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,EAAP,MAAe,kBAAf;AAEA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAO,YAAP;AAEA,IAAIC,MAAJ;AACA,MAAMC,QAAQ,GAAG,gBAAjB;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC3B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACW,IAAD,EAAOC,OAAP,IAAkBZ,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0Bd,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACe,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,EAAD,CAAtC;AAIAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM;AAAEQ,MAAAA,IAAF;AAAQE,MAAAA;AAAR,QAAiBT,WAAW,CAACe,KAAZ,CAAkBT,QAAQ,CAACU,MAA3B,CAAvB;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAYX,IAAZ,EAAkBE,IAAlB;AACAN,IAAAA,MAAM,GAAGF,EAAE,CAACG,QAAD,CAAX;AAEAI,IAAAA,OAAO,CAACD,IAAD,CAAP;AACAG,IAAAA,OAAO,CAACD,IAAD,CAAP;AAEAN,IAAAA,MAAM,CAACgB,IAAP,CAAY,MAAZ,EAAoB;AAAEZ,MAAAA,IAAF;AAAQE,MAAAA;AAAR,KAApB,EAAqCW,KAAD,IAAW;AAC3C,UAAGA,KAAH,EAAU;AACRC,QAAAA,KAAK,CAACD,KAAD,CAAL;AACD;AACF,KAJH,EATY,CAeZ;;AACA,WAAO,MAAM;AACTjB,MAAAA,MAAM,CAACgB,IAAP,CAAY,YAAZ;AAEAhB,MAAAA,MAAM,CAACmB,GAAP;AACH,KAJD;AAKH,GArBQ,EAqBN,CAAClB,QAAD,EAAWE,QAAQ,CAACU,MAApB,CArBM,CAAT;AAuBAjB,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,MAAM,CAACoB,EAAP,CAAU,SAAV,EAAqBV,OAAO,IAAI;AAC9BD,MAAAA,WAAW,CAACD,QAAQ,IAAI,CAAE,GAAGA,QAAL,EAAeE,OAAf,CAAb,CAAX;AACD,KAFD;AAGH,GAJQ,EAIN,EAJM,CAAT;;AAMA,QAAMW,WAAW,GAAIC,KAAD,IAAW;AAC3BA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAIb,OAAJ,EAAa;AACTV,MAAAA,MAAM,CAACgB,IAAP,CAAY,aAAZ,EAA2BN,OAA3B,EAAoC,MAAMC,UAAU,CAAC,EAAD,CAApD;AACH;AACJ,GAND;;AAQAG,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBL,OAAzB,EAAkC,aAAlC,EAAiDF,QAAjD,EA7C2B,CA+C3B;;AACA,sBACI;AAAK,IAAA,SAAS,EAAG,gBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAG,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI,oBAAC,OAAD;AAAS,IAAA,IAAI,EAAIF,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,CADJ;AAaH,CA7DD;;AAgEA,eAAeJ,IAAf","sourcesContent":["import React, { useState, useEffect} from \"react\";\r\nimport queryString from \"query-string\"\r\nimport io from \"socket.io-client\"\r\n\r\nimport InfoBar from \"../InfoBar/InfoBar\"\r\nimport \"./Chat.css\"\r\n\r\nlet socket; \r\nconst ENDPOINT = \"localhost:5000\"\r\n\r\nconst Chat = ({ location }) => {\r\n    const [name, setName] = useState(\"\");\r\n    const [room, setRoom] = useState(\"\");\r\n    const [messages, setMessages] = useState([]);\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const { name, room } = queryString.parse(location.search)\r\n        \r\n        console.log(name, room) \r\n        socket = io(ENDPOINT)\r\n\r\n        setName(name);\r\n        setRoom(room);\r\n\r\n        socket.emit('join', { name, room }, (error) => {\r\n            if(error) {\r\n              alert(error);\r\n            }\r\n          });\r\n\r\n        // exiting handling\r\n        return () => {\r\n            socket.emit(\"disconnect\");\r\n\r\n            socket.off()\r\n        }\r\n    }, [ENDPOINT, location.search]);\r\n\r\n    useEffect(() => {\r\n        socket.on('message', message => {\r\n          setMessages(messages => [ ...messages, message ]);\r\n        });\r\n    }, []);\r\n\r\n    const sendMessage = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (message) {\r\n            socket.emit(\"sendMessage\", message, () => setMessage(\"\"))\r\n        }\r\n    }\r\n\r\n    console.log(\"message: \", message, \" messages: \", messages)\r\n\r\n    // function for sending messages\r\n    return (\r\n        <div className = \"outerContainer\">\r\n            <div className = \"container\"> \r\n                \r\n                <InfoBar room = {room}/>\r\n                { /*<input \r\n                    value = {message}\r\n                    onChange = {(event) => setMessage(event.target.value)}\r\n                    onKeyPress = {(event => event.key === \"Enter\" ? sendMessage(event) : null)}\r\n                /> */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Chat"]},"metadata":{},"sourceType":"module"}